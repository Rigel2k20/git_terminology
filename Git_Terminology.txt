@ Git is a version control system that allows you to track changes to your code.
# Some CLI commands:
    → mdkir - creates a new directory :
        $ mdkir <directory name>
    → cd - changes the current directory :
        $ cd <directory name>
    → touch - creates a new file :
        $ touch <file name>.<file extension>
    → rm - removes a file :
        $ rm <file name>.<file extension>
    → rm -rf - removes a directory and all of its contents :
        $ rm -rf <directory name>
    → ls - lists the contents of a directory :
        $ ls
    → ls -a - lists the contents of a directory including hidden files :
        $ ls -a
    → clear - clears the terminal :
        $ clear

############################################################################

# Git commands:
    - git init - initializes a new git repository :
        $ git init
    - git Status - shows the status of your repository :  
        $ git status
            On branch master

            No commits yet

            Untracked files:
            (use "git add <file>..." to include in what will be committed)
                    Git_Terminology.txt # The file color is red.

            nothing added to commit but untracked files present (use "git add" to track)

    - git add - adds a file to the staging area :
        $ git add <file name>.<file extension> # After running "git add <file name>.<file extension>" the status of the file will be:
        $ git status
        On branch master

        No commits yet

        Changes to be committed:
        (use "git rm --cached <file>..." to unstage)
                new file:   Git_Terminology.txt # The file color changes to green
                # The file is now tracked by git and is in the staging area and ready to be committed.

    - git rm --cached -r : removes files from the staging area :

    - git commit - commits the changes to the repository :
        $ git commit -m "commit message" # The commit message is a short description of the changes made to the repository. so try to be as explicit as possible.
        $ git commit -m "at 'git log' command now"
        [master (root-commit) 8aae6fe] at 'git log' command now
        1 file changed, 38 insertions(+)
        create mode 100644 Git_Terminology.txt

        # The best practice is to use the following terms: 
        - To use present tense and imperative mood when writing the commit message.
        - ......................................... Will comeback to this later.

    - git log - shows the commit history :
        $ git log # This will show the commit history of the repository. along with the commit message, the author, and the date. and the commit hash.
        $ git log
        commit 8aae6fe7ef50a38c22fe052021a5a7dd5b374723 (HEAD -> master) # The commit hash is a unique identifier for the commit.
        Author: Rigel2k20 <abdou.uf88@gmail.com> # The author is the user who made the commit.
        Date:   Tue Nov 12 15:00:17 2024 +0000 # The date is in UTC.

            at 'git log' command now # Shows what commit message was used.

    - Using git commit again:
        $ git commit -m "Created 2 test.txt files"
        On branch master
        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git restore <file>..." to discard changes in working directory)
                modified:   Git_Terminology.txt

        Untracked files:
        (use "git add <file>..." to include in what will be committed)
                test1.txt
                test2.txt

    - Using git add this time:
        $ git add test1.txt test2.txt # or "$ git add ." This will add all the files in the current directory to the staging area.

    - Using git status to see the changes:
        $ git status
        On branch master
        Changes to be committed:
        (use "git restore --staged <file>..." to unstage)
                new file:   test1.txt # The file is green now tracked by git and is in the staging area and ready to be committed.
                new file:   test2.txt # ....................................................................................

        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git restore <file>..." to discard changes in working directory)
                modified:   Git_Terminology.txt

    - Using git log to see the changes:
        $ git log
        commit 8aae6fe7ef50a38c22fe052021a5a7dd5b374723 (HEAD -> master) # HEAD is a pointer to the current branch.
        Author: Rigel2k20 <abdou.uf88@gmail.com>
        Date:   Tue Nov 12 15:00:17 2024 +0000

            at 'git log' command now

    - Using git checkout to undo the changes: 
    - First we need to know what have changed using "git diff <file name>.<file extension>" - 
        $ git diff test2.txt
        diff --git a/test2.txt b/test2.txt
        index e6da72a..fa5d688 100644
        --- a/test2.txt
        +++ b/test2.txt
        @@ -1 +1,2 @@
        -This is some random text for testing purposes. on the test2 file. #This line is in red, shows what's been deleted.
        \ No newline at end of file
        +mdfkglmdfkglmkdfmlgklmdfglmkdf gdfmlgkdlmfkglmdfkgkldf gdflmgkdlmfkglmdfkglmopgj^zejg^j #This line is in green, shows what's been added.

    • Now we can use "git checkout <file name>.<file extension>" to undo the changes:
    $ git checkout test2.txt
    Updated 1 path from the index

    * We'll use "git commit -m" again to commit the changes:
    $ git commit -m "Changed test2.txt and restored it with git checkout test2.txt."
    [master 07e61d7] Changed test2.txt and restored it with git checkout test2.txt.
    2 files changed, 2 insertions(+)
    create mode 100644 test1.txt
    create mode 100644 test2.txt


*This is a quick recap of what we did so far:
    → git init → we initialized a new git repository, which is a directory with a .git directory inside it.
    → Then we created a file called "Git_Terminology.txt" and added some text to it.
    → Then we added "Git_Terminology.txt" to the staging area using "git add".
    → Then we committed the changes to the repository using "git commit".
    → Then we added 2 more files called "test1.txt" and "test2.txt" to the staging area using "git add".
    → Then we committed the changes to the repository using "git commit".
    → Then we used "git log" to see the commit history.
    → Then we used "git status" to see the status of the repository.
    → Next will be working on remote git 

# Pushing our file from local to remote repository Master branch
    • By using the "git push -u origin master"
    $ git push -u origin master
    Enumerating objects: 7, done.
    Counting objects: 100% (7/7), done.
    Delta compression using up to 8 threads
    Compressing objects: 100% (6/6), done.
    Writing objects: 100% (7/7), 1.08 KiB | 551.00 KiB/s, done.
    Total 7 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
    remote: Resolving deltas: 100% (1/1), done.
    To https://github.com/Rigel2k20/git_terminology.git
    * [new branch]      master -> master
    branch 'master' set up to track 'origin/master'.

# Git Ignore file: 
    • gitignore is a file that tells git which files to ignore.
    → to create a gitignore file, we can use "touch .gitignore"
    → then we can use "code .gitignore" to open the file in VS Code.
    → we can add the files we want to ignore to the gitignore file.
    * Here are some basic commands to use with gitignore:

# Here are some basic commands you can do with gitignore:
    # sign to comment a line 
    * sign 

    