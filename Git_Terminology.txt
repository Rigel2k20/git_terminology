@ Git is a version control system that allows you to track changes to your code.
1 - Some CLI commands:
    → mdkir - creates a new directory :
        $ mdkir <directory name>
    → cd - changes the current directory :
        $ cd <directory name>
    → touch - creates a new file :
        $ touch <file name>.<file extension>
    → rm - removes a file :
        $ rm <file name>.<file extension>
    → rm -rf - removes a directory and all of its contents :
        $ rm -rf <directory name>
    → ls - lists the contents of a directory :
        $ ls
    → ls -a - lists the contents of a directory including hidden files :
        $ ls -a
    → clear - clears the terminal :
        $ clear

############################################################################

2 - Git commands:
    - git init - initializes a new git repository :
        $ git init
    - git Status - shows the status of your repository :  
        $ git status
            On branch master

            No commits yet

            Untracked files:
            (use "git add <file>..." to include in what will be committed)
                    Git_Terminology.txt # The file color is red.

            nothing added to commit but untracked files present (use "git add" to track)

    - git add - adds a file to the staging area :
        $ git add <file name>.<file extension> # After running "git add <file name>.<file extension>" the status of the file will be:
        $ git status
        On branch master

        No commits yet

        Changes to be committed:
        (use "git rm --cached <file>..." to unstage)
                new file:   Git_Terminology.txt # The file color changes to green
                # The file is now tracked by git and is in the staging area and ready to be committed.

    - git rm --cached -r : removes files from the staging area :

    - git commit - commits the changes to the repository :
        $ git commit -m "commit message" # The commit message is a short description of the changes made to the repository. so try to be as explicit as possible.
        $ git commit -m "at 'git log' command now"
        [master (root-commit) 8aae6fe] at 'git log' command now
        1 file changed, 38 insertions(+)
        create mode 100644 Git_Terminology.txt

        # The best practice is to use the following terms: 
        - To use present tense and imperative mood when writing the commit message.
        - ......................................... Will comeback to this later.

    - git log - shows the commit history :
        $ git log # This will show the commit history of the repository. along with the commit message, the author, and the date. and the commit hash.
        $ git log
        commit 8aae6fe7ef50a38c22fe052021a5a7dd5b374723 (HEAD -> master) # The commit hash is a unique identifier for the commit.
        Author: Rigel2k20 <example@example.com> # The author is the user who made the commit.
        Date:   Tue Nov 12 15:00:17 2024 +0000 # The date is in UTC.

            at 'git log' command now # Shows what commit message was used.

    - Using git commit again:
        $ git commit -m "Created 2 test.txt files"
        On branch master
        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git restore <file>..." to discard changes in working directory)
                modified:   Git_Terminology.txt

        Untracked files:
        (use "git add <file>..." to include in what will be committed)
                test1.txt
                test2.txt

    - Using git add this time:
        $ git add test1.txt test2.txt # or "$ git add ." This will add all the files in the current directory to the staging area.

    - Using git status to see the changes:
        $ git status
        On branch master
        Changes to be committed:
        (use "git restore --staged <file>..." to unstage)
                new file:   test1.txt # The file is green now tracked by git and is in the staging area and ready to be committed.
                new file:   test2.txt # ....................................................................................

        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git restore <file>..." to discard changes in working directory)
                modified:   Git_Terminology.txt

    - Using git log to see the changes:
        $ git log
        commit 8aae6fe7ef50a38c22fe052021a5a7dd5b374723 (HEAD -> master) # HEAD is a pointer to the current branch.
        Author: Rigel2k20 <example@example.com>
        Date:   Tue Nov 12 15:00:17 2024 +0000

            at 'git log' command now

    - Using git checkout to undo the changes: 
    - First we need to know what have changed using "git diff <file name>.<file extension>" - 
        $ git diff test2.txt
        diff --git a/test2.txt b/test2.txt
        index e6da72a..fa5d688 100644
        --- a/test2.txt
        +++ b/test2.txt
        @@ -1 +1,2 @@
        -This is some random text for testing purposes. on the test2 file. #This line is in red, shows what's been deleted.
        \ No newline at end of file
        +mdfkglmdfkglmkdfmlgklmdfglmkdf gdfmlgkdlmfkglmdfkgkldf gdflmgkdlmfkglmdfkglmopgj^zejg^j #This line is in green, shows what's been added.

    • Now we can use "git checkout <file name>.<file extension>" to undo the changes:
    $ git checkout test2.txt
    Updated 1 path from the index

    * We'll use "git commit -m" again to commit the changes:
    $ git commit -m "Changed test2.txt and restored it with git checkout test2.txt."
    [master 07e61d7] Changed test2.txt and restored it with git checkout test2.txt.
    2 files changed, 2 insertions(+)
    create mode 100644 test1.txt
    create mode 100644 test2.txt


*This is a quick recap of what we did so far:
    → git init → we initialized a new git repository, which is a directory with a .git directory inside it.
    → Then we created a file called "Git_Terminology.txt" and added some text to it.
    → Then we added "Git_Terminology.txt" to the staging area using "git add".
    → Then we committed the changes to the repository using "git commit".
    → Then we added 2 more files called "test1.txt" and "test2.txt" to the staging area using "git add".
    → Then we committed the changes to the repository using "git commit".
    → Then we used "git log" to see the commit history.
    → Then we used "git status" to see the status of the repository.
    → Next will be working on remote git 

3 - Pushing our file from local to remote repository Master branch
    • By using the "git push -u origin master"
    $ git push -u origin master
    Enumerating objects: 7, done.
    Counting objects: 100% (7/7), done.
    Delta compression using up to 8 threads
    Compressing objects: 100% (6/6), done.
    Writing objects: 100% (7/7), 1.08 KiB | 551.00 KiB/s, done.
    Total 7 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
    remote: Resolving deltas: 100% (1/1), done.
    To https://github.com/Rigel2k20/git_terminology.git
    * [new branch]      master -> master
    branch 'master' set up to track 'origin/master'.

4 - Git Ignore file: 
    • gitignore is a file that tells git which files to ignore.
    → to create a gitignore file, we can use "touch .gitignore"
    → then we can use "code .gitignore" to open the file in VS Code.
    → we can add the files we want to ignore to the gitignore file.
    * Here are some basic commands to use with gitignore:

5 - Here are some basic rules that are specific to gitignore file:
    1 - Ignoring files & directories : 
        → Ignore specific files:
            • file.txt 
            # this will ignore the file.txt in the root directory.

        → Ignore all files with a specific extension:
            • *.txt
            # this will ignore all files with the .txt extension in the entire repository.

        → Ignore a specific directory:
            • /folder/
            # This will ignore the build directory at the root level of the project.

        → Ignore all files within a specific directory:
            • /folder/*
            # This will ignore all files inside the logs directory, but the directory itself will remain.

    2 - Negating a Pattern (Force tracking)
        → You can negate an ignore rule by using the ! symbol. For example:
            • *.txt
            !important.txt 
            # This will ignore all files with the .txt extension, except for the important.txt file.

    3 - Wildcard Matching
        →  Match all files in any subdirectory:
            • **/file.txt
            # This will ignore file.txt in any directory or subdirectory.
        
        → Ignore all files with a specific extension in a directory:
            • /src/**/*.txt
            # This will ignore all .txt files in any subdirectory under src.

    4 - Ignoring Specific File Types
        → Ignore all compiled files:
            • *.class
            • *.jar
            # This will ignore all java .class and .jar files.
            
        → Ignore all Python bytecode files:
            • __pycache__/
            • *.py[cod]
            # This ignores the __pycache__ directory and Python compiled bytecode files.

    5 - Commenting Inside .gitignore
        # You can add comments in the .gitignore file for better organization:
            # Ignore logs
            • *.log

            # Ignore temporary files
            • *.tmp

    6 - Ignore All Files in a Directory Except One
        # For example, to ignore all files in a directory except file.txt:
            • dir/*
            • !dir/file.txt

    7 - Global .gitignore
        # You can set up a global .gitignore for files that should be ignored across all repositories on your machine,
        such as system files like .DS_Store on macOS or Thumbs.db on Windows:
            • git config --global core.excludesfile ~/.gitignore_global

    -------------------------------------------------------------------------

    * Common .gitignore Patterns for Development
        → 1 - Node.js Projects:
            •   logs
                *.log

                # Dependency directories
                node_modules/

                # Environment variables
                .env

        → 2 - Python Projects:
            •   # Byte-compiled / optimized / DLL files
                __pycache__/
                *.py[cod]

                # Distribution / packaging
                build/
                dist/
                *.egg-info/

                # Virtual environments
                venv/

        → 3 - Java Projects:
            •   # Compiled class files
                *.class

                # Logs and temp files
                *.log
                *.tmp

                # Maven and Gradle
                target/
                build/

        → 4 - MacOs SystemFiles:
            •   # macOS Finder files
                .DS_Store
        
        # These are widely used commands and patterns in .gitignore files. 
        Each project might need specific files and folders to be ignored based on its build tools or platform.

##############################################################################################################

6 - Git clone : 
    # git clone is a command used to clone a remote repository to your local machine with the following command:
        • git clone <repository_url> 
        $ git clone https://github.com/clupasq/word-mastermind.git
        # This command will create a new directory with the name of the repository and clone the repository into it.
        # You can then navigate to the directory and start working with the repository.
        # You can also clone a repository into a specific directory by using the following command:
        • git clone <repository_url> <directory>

###############################################################################################################

7 - Git branches :
    # A Git branch is an experimental version of a repository 
    that allows you to work on new features or bug fixes without affecting the main codebase.

    # To create a new branch, use the following command:
        • git branch <branch_name>
        $ git branch secrect-branch
    
    # To check which branch you are currently on, use the following command:
        • git branch
        $ git branch
        * master          # The asterisk (*) indicates the current branch
          secrect-branch 

    # To switch to a different branch, use the following command:
        • git checkout <branch_name>
        $ git checkout secrect-branch
        # Now you are on the secrect-branch

    